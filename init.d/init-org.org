#+TITLE: emacs.d - Org
#+AUTHOR: thKim
#+EMAIL: unfor9otten@gmail.com
#+STARTUP: content
#+OPTIONS: toc:2 num:nil ^:nil

* Org load

#+begin_src emacs-lisp
  (require 'org)
#+end_src

* Basices

#+begin_src emacs-lisp
  (setq org-log-done t
        org-completion-use-ido t
        org-edit-timestamp-down-means-later t
        org-agenda-start-on-weekday nil
        org-agenda-span 14
        org-agenda-include-diary t
        org-agenda-window-setup 'current-window
        org-agenda-inhibit-startup t
        org-fast-tag-selection-single-key 'expert
        org-export-kill-product-buffer-when-displayed t
        org-tags-column 80)
#+end_src

* Refile

Refile targets include this file and any file contributing to the agenda - up to
5 levels deep.

#+begin_src emacs-lisp
  (setq org-refile-targets (quote ((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5))))
#+end_src

Targets start with the file name - allows creating level 1 tasks.

#+begin_src emacs-lisp
  (setq org-refile-use-outline-path (quote file))
#+end_src

* Outline

Targets complete in steps so we start with filename, TAB shows the next level of
targets etc.

#+begin_src emacs-lisp
  (setq org-outline-path-complete-in-steps t)
#+end_src


* plantuml setting
#+BEGIN_SRC emacs-lisp

(setq org-startup-with-inline-images t)

;;; plantuml
(org-babel-do-load-languages
 'org-babel-load-languages
 '((plantuml . t)))
(setq org-confirm-babel-evaluate nil)
(setq org-plantuml-jar-path
      (expand-file-name "bin/plantuml/plantuml.jar"))
(add-hook 'org-babel-after-execute-hook
	  (lambda ()
	    (when org-inline-image-overlays
	      (org-redisplay-inline-images))))
(add-to-list 'org-structure-template-alist
	                  '("u" "#+BEGIN_SRC plantuml :file ?.png :cmdline -charset UTF-8\n 
skinparam monochrome true\n#+END_SRC"))

#+END_SRC

* Exporters

** Markdown

#+begin_src emacs-lisp
  (require 'ox-md)
#+end_src

** GitHub flavoured Markdown

#+begin_src emacs-lisp
  (use-package ox-gfm :ensure t)
#+end_src

* org-indent-mode

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda () (org-indent-mode t)))
#+end_src

* Syntax highlight inline code blocks

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

* fstree

#+begin_src emacs-lisp
(unless (package-installed-p 'org-fstree)
 (package-install 'org-fstree))

(require 'cl) ;; dependency 
(require 'org-fstree)
#+end_src

* HTML export workaround

#+begin_src emacs-lisp
  (defun org-font-lock-ensure ()
    (font-lock-fontify-buffer))
#+end_src

* TODOs

#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "DOING(w)" "WAITING" "|" "DONE"))))
#+end_src

* Pomodoro

#+begin_src emacs-lisp
  (unless (package-installed-p 'org-pomodoro)
     (package-install 'org-pomodoro))
  (require 'org-pomodoro)
#+end_src

* Babel languages

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((awk . t)
     (clojure . t)
     (ditaa . t)
     (dot . t)
     (gnuplot . t)
     (haskell . t)
     (js . t)
     (latex . t)
     (lisp . t)
     (ruby . t)
     (python . t)
     (R . t)
     (sass . t)
     (scala . t)
     (sh . t)))
#+end_src

Clojure 지원

#+begin_src emacs-lisp
  (require 'ob-clojure)
  (setq org-babel-clojure-backend 'cider)
#+end_src

Ditaa 지원

#+begin_src emacs-lisp
  (setq org-ditaa-jar-path "~/bin/ditaa/ditaa0_9.jar")
#+end_src

* Bindings

#+begin_src emacs-lisp
  (define-key org-mode-map (kbd "C-M-<down>") 'org-down-element)
  (define-key org-mode-map (kbd "C-M-<up>") 'org-up-element)
#+end_src


